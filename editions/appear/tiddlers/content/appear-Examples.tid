created: 20150201173223292
creator: Tobias Beer
modified: 20151216135242009
modifier: Tobias Beer
title: appear-Examples
type: text/vnd.tiddlywiki

<div class="grey-svg">

!! Simple Slider

<<` """before <$appear>

!Hello There

I am text.</$appear> after""">>

!! Simple Popup

<<` """before <$appear type=popup>

!Hello There

I am text.</$appear> after""">>

!! Simple Slider With Custom Button

The below uses the ''$state'' attribute to specify a shortcut way to qualify a unique state with respect to the current tiddler.

<<` """before <$appear show="slide down" $state="slider-button">

!Hello There

I am text.</$appear> after""">>

!! Simple Slider With Custom Show / Hide Buttons

<<` """before <$appear show="open &raquo;" hide="&laquo; close" $state="slider-buttons">

!Hello There

I am text.</$appear> after""">>

!! Inline Slider With Custom Hide Button

<<` """before <$appear hide="&laquo;" mode="inline" $state="inline">//I am text.//</$appear> after""">>

!! Same As Above In Block-Mode

<<` """before <$appear hide="&laquo;" $state="block">//I am text.//</$appear> after""">>

!! Same As Above With Custom Mode

Any non-standard mode is interpreted as //block// mode, however without applying the default slider-styles:

<<` """before <$appear hide="&laquo;" mode="custom" $state="custom-block">//I am text.//</$appear> after""">>

!! Inline Slider Only Showing Once

<<` """before <$appear once mode="inline" $state="inline-once">//I am text, and you cannot hide me once you see me.//</$appear> after""">>

!! Slider With Image Buttons

<<` """before <$appear show="open {{$:/core/images/chevron-right}}" hide="{{$:/core/images/chevron-left}} close" $state="image-buttons">

!Hello There

I am text.</$appear> after""">>

!! Popup With Custom Button

<<` """before <$appear show="click to open popup" type=popup>

!Hello There

I am text.</$appear> after""">>

!! Tiddler Slider

<$macrocall $name=` 
text="""<$vars tid="GettingStarted">
<$appear show="<$text text=<<tid>>/>" $state="tiddler-slider" mode="block">
<$transclude mode="block" tiddler=<<tid>>/>
</$appear>
</$vars>"""/>

!! List Popup

<$macrocall $name=` 
text="""before <$appear type="popup" $state="list-popup">

{{{[prefix[appear]sort[title]]}}}
</$appear> after"""/>

!! Tiddler Widget Tiddler Slider

The next example implements custom arrows with a helper macro, wrapped using the <<x TiddlerWidget>> to set a different context.

```
\define slider-label(prefix,suffix)
@@.grey-svg $prefix$<$text text="$(currentTiddler)$"/>$suffix$@@
\end
```

<$macrocall $name=` 
text="""<$tiddler tiddler="GettingStarted">
<$appear
show=<<slider-label "" " {{$:/core/images/chevron-right}}">>
hide=<<slider-label "" " {{$:/core/images/chevron-down}}">>
$state="tiddler-widget-slider">
<$transclude mode="block"/>
</$tiddler>"""/>

!! Accordion Menu

Making use of the above slider-label macro and another helper macro for the tooltip:

```
\define slider-tooltip()
show/hide tiddler '$(currentTiddler)$'
\end
```

@@.note
''Note:'' The key to implementing an accordion menu is to define the same ''state'' tiddler for all list items.
@@

<$macrocall $name="`" text="""<$list filter="[all[shadows]prefix[$:/plugins/tobibeer/appear/]sort[title]]">
<$appear
show=<<slider-label>>
tooltip=<<slider-tooltip>>
state="$:/state/menu/accordion">
<$transclude mode="block"/>
</$appear><br>
</$list>"""/>

!! Remote Popup Handler

<$macrocall $name="`" text="""| <$appear show="click to show" hide="click to hide" type="popup" $state="popups-handler" handler="popups">I [[appear]] when you tell me to.</$appear> |eenie meenie miney mo |eenie meenie miney mo <br/><br/> |"""/>

</div>