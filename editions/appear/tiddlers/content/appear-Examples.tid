created: 20150201173223292
creator: Tobias Beer
modified: 20151216103007088
modifier: Tobias Beer
title: appear-Examples
type: text/vnd.tiddlywiki

<div class="grey-svg">

''simple slider:''

<<` """before <$appear>

!Hello There

I am text.</$appear> after""">>

''simple popup:''

<<` """before <$appear type=popup>

!Hello There

I am text.</$appear> after""">>

''simple slider with label:''

The below uses the ''$state'' attribute to specify a shortcut way to qualify a unique state with respect to the current tiddler.

<<` """before <$appear show="slide down" $state="slide-label">

!Hello There

I am text.</$appear> after""">>

''simple slider with show/hide label:''

<<` """before <$appear show="open &raquo;" hide="&laquo; close" $state="slide-labels">

!Hello There

I am text.</$appear> after""">>

''inline slider with custom hide button:''

<<` """before <$appear hide="&laquo;" mode="inline" $state="inline">//I am text.//</$appear> after""">>

''same as block-mode slider:''

<<` """before <$appear hide="&laquo;" $state="block">//I am text.//</$appear> after""">>

''same as slider with custom mode''

Any non-standard mode is interpreted as //block// mode, however without applying the default slider-styles:

<<` """before <$appear hide="&laquo;" mode="custom" $state="custom-block">//I am text.//</$appear> after""">>

''inline slider that only shows once:''

<<` """before <$appear once mode="inline" $state="inline-once">//I am text, and you cannot hide me once you see me.//</$appear> after""">>

''slider with images in the labels:''

<<` """before <$appear show="open {{$:/core/images/chevron-right}}" hide="{{$:/core/images/chevron-left}} close" $state="slide-image-labels">

!Hello There

I am text.</$appear> after""">>

''simple popup with a custom label:''

<<` """before <$appear show="click to open popup" type=popup>

!Hello There

I am text.</$appear> after""">>

''one way to do a tiddler slider:''

<$macrocall $name=` 
text="""<$vars tid="GettingStarted">
<$appear show="<$text text=<<tid>>/>" $state="slide-tiddler" mode="block">
<$transclude mode="block" tiddler=<<tid>>/>
</$appear>
</$vars>"""/>

''a popup with a list''

<$macrocall $name=` 
text="""before <$appear type="popup" $state="popup-list">

{{{[prefix[appear]sort[title]]}}}
</$appear> after"""/>

''another way for a tiddler slider''

The next example implements custom arrows with a helper macro, wrapped using the <<x TiddlerWidget>> to set a different context.

```
\define slider-label(prefix,suffix)
@@.grey-svg $prefix$<$text text="$(currentTiddler)$"/>$suffix$@@
\end
```

<$macrocall $name=` 
text="""<$tiddler tiddler="GettingStarted">
<$appear
show=<<slider-label "" " {{$:/core/images/chevron-right}}">>
hide=<<slider-label "" " {{$:/core/images/chevron-down}}">>
$state="another-tiddler-slider">
<$transclude mode="block"/>
</$tiddler>"""/>

''an accordion menu''

Making use of the above slider-label macro and another helper macro for the tooltip:

```
\define slider-tooltip()
show/hide tiddler '$(currentTiddler)$'
\end
```

<$macrocall $name="`" text="""<$list filter="[all[shadows]prefix[$:/plugins/tobibeer/appear/]sort[title]]">
<$appear
show=<<slider-label>>
tooltip=<<slider-tooltip>>
state="$:/state/menu/accordion">
<$transclude mode="block"/>
</$appear><br>
</$list>"""/>

''using a handler in problem areas''

<$macrocall $name="`" text="""| <$appear show="click to show" hide="click to hide" type="popup" $state="popups-handler" handler="popups">I [[appear]] when you tell me to.</$appear> |eenie meenie miney mo |eenie meenie miney mo <br/><br/> |"""/>

</div>